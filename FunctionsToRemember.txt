these will be very useful in the future


" | " is a connector for comments, nothing more



USED IN: WORLDSYSTEM
public override void ModifyWorldGenTasks(List<GenPass> tasks, ref float totalWeight)
|
//ModifyWorldGenTasks will cover the generation when you generate a NEW world.
//It will not generate on an existing world nor generate Hardmode stuff.
                                                                                             
        {
            int shiniesIndex = tasks.FindIndex(t => t.Name.Equals("Shinies"));
            |
            //when we made the GenPass, we gave it a name. Vanilla tasks also have a name, and this is where we will get
            //the index from. We are finding the index of "Shinies" in the task list.
            //https://github.com/tModLoader/tModLoader/wiki/Vanilla-World-Generation-Steps
            //if index is not found, it will return -1.
            if (shiniesIndex != -1)
            {
                tasks.Insert(shiniesIndex + 1, new SkulkOreGenPass("Skulk Ore pass", 320f));
                |
                //in order to get OUR GenPass to work, we have to insert it into the task list.
                //DO NOT ADD IT IF ALREADY EXISTS.
                //We want to insert it after shinies has been spawned. So we do shiniesIndex + 1.
            }
        }




USED IN: GENPASS





        public SkulkOreGenPass(string name, float weight) : base(name, weight) { }
        |
        //Every task in World Generation has its own name, we use these names to access their index in the task list.
        //Make the name unique to avoid conflicts.
        //The weight value is used to determine the total "weight" of the world. This value helps decide the progression of the world creation bar
        //during generation.

        protected override void ApplyPass(GenerationProgress progress, GameConfiguration configuration)
        |
        //ApplyPass is the abstract method inside GenPass. This is required, and will error if not included
        {
            
            progress.Message = "EXAMPLE: Drilling Skulk in the ground...";
            |
            //The Progress Message is displayed when this GenPass is active. You can call it whatever you want. For larger world Gen tasks, you can use these to help determine where your code got stuck.
            
            //ORE SPAWNING PROCESS:

            int maxToSpawn = (int)(Main.maxTilesX * Main.maxTilesY * 0.00006);
            |
            //this will be used for each ore spawned, and this value will change.
            //This gets the total area of the world in Tiles and then multiplies the value by a small number, in this case 0.00006
            //Small World: 4,200 * 1,200 * 0.00006 = 302.4 (302)
            //or 6E-05 for 0.00006
            for (int i = 0; i < maxToSpawn; i++)//used to go from a value of 0 to our maxToSpawn value. Ensures spawning of EXACT amount set by maxToSpawn
            {   

                int x = WorldGen.genRand.Next(100, Main.maxTilesX - 100); 
                |
                //ensure the value is between 0 and Main.maxTilesX - 1. Anything outside of these values for x will throw an error.
                //This will set our range to the end of the world to the right - 100 tiles.
                //WorldGen.genRand.Next takes a min and max value. The min cant be greater than the max.

                int y = WorldGen.genRand.Next((int)WorldGen.worldSurface, Main.maxTilesY - 300);
                |
                //WorldGen.worldSurface is the Y value of the surface. This is just the surface value used by WorldGen,
                //not the ground at spawn.
                //The size of the underworld and its position vary based on WorldSize. Doing maxTilesY - 300 ensures the ore will be less
                //likely to spawn in the underworld, but not completely 0.

                WorldGen.TileRunner(x, y, WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 5), ModContent.TileType<SkulkOre>()); 
                |
                //takes 5 params: x,y,strength and type. Use our premade x and y values.
                //strength will determine the size and number of ores spawned during each step.
                //step will determine how many attempts will be made to spawn the ore. In this instance, 2 - 5 times.
                //Type is the TileType we want to use. We can use TileID or ModContent.TileType for this.
            }

TO SPAWN ORE, AND TO SPAWN IT IN SPECIFIC CONDITION: --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


maxToSpawn = WorldGen.genRand.Next(100, 250);
            int numSpawned = 0;
            int attempts = 0;
            while (numSpawned < maxToSpawn)
            {
                int x = WorldGen.genRand.Next(0, Main.maxTilesX); //this is just to get a random point in the whole world
                int y = WorldGen.genRand.Next(0, Main.maxTilesY);

                Tile tile = Framing.GetTileSafely(x, y);//get the tile at the current x and y position as we only want the ore the spawn in a specific location, do this by checking the TileType.
                if(tile.TileType == TileID.SnowBlock || tile.TileType == TileID.IceBlock || tile.TileType == TileID.Slush)
                {
                    WorldGen.TileRunner(x, y, WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(1, 4), ModContent.TileType<SkulkRareOre>());
                    numSpawned++; 
                }

                attempts++;
                if (attempts >= 100000) //safety so we dont end up in an infinite loop
                {
                    break;
                }    
            }
        }
    }
}


*In the code WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(1, 4), the two Next method calls are generating random numbers within specific ranges

The first call WorldGen.genRand.Next(2, 5) generates a random integer between 2 (inclusive) and 5 (exclusive). This number determines the length of the vein of SkulkRareOre being generated

The second call WorldGen.genRand.Next(1, 4) generates a random integer between 1 (inclusive) and 4 (exclusive). This number determines the width of the vein of SkulkRareOre being generated.

This code is checking whether a particular tile at the x, y position is either a SnowBlock, IceBlock, or Slush block,
and if it is, it generates a vein of the SkulkRareOre tile type at that location using the WorldGen.TileRunner method.

The WorldGen.TileRunner method generates a vein of the specified tile type at a given x, y 
position in the world. The first argument is the x position, the second is the y position,
the third and fourth arguments specify the length and width of the vein, and the fifth argument is the tile type to be used for the vein.
SECTION CLOSE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


USED IN: SWORD, TOOLS --------------------------------------------------------------------------------------------------------------

        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("RazorLeaf Sword"); //display name on the sword
            Tooltip.SetDefault("Created with the sharp edges of nature."); //description
            CreativeItemSacrificesCatalog.Instance.SacrificeCountNeededByItemId[Type] = 1; //how many needed for journey mode research
        }

USED IN: ITEMS --------------------------------------------------------------------------------------------------------------
        public override void AddRecipes()
        {
            CreateRecipe() //this takes a param in the '()' for how many gets created at a time, by default it is 1.
                .AddRecipeGroup(RecipeGroupID.Wood, 10) //recipe groups are items that are related in some kind of way, like iron and lead, and all wood types.
                .AddIngredient(ModContent.ItemType<FirstItem>(), 8) //this accesses my FirstItem material.
                .AddTile(TileID.WorkBenches) //addtile takes tile id for crafting (like if it takes a anvil or a work bench)
                .Register(); //register registers the item.

        }
        


USED IN: TILES ------------------------------------------------------------------------------------------------------------------------------------
        public override bool Drop(int x, int y)
        { //We want to get the tile from its position in the world, to do this we create a local variable with the type of Tile. We then set this tile to be equal to whatever
            //tile is in the x and y tiles array
            Tile t = Main.tile[x, y];

            //we need to get the tiles frame index in order to determine what item is going to be dropped. We know that each frame is 18 piels wide so we take the tiles FrameX and divide that by
            //18 to get the frame index.
            int style = t.TileFrameX / 18;
            //the switch statement will make it easier to create the items. We can create a new item depending on the value "Style".
            switch(style) //style, being of course, which bar from the sprite strip we are using.
            {
                //in order to spawn an item, Item.NewItem is used, which takes: Source, X, Y, Width, Height, ItemType. as parameters
                //the x and y value are currently equal to the position of the tile in the array and not the actual position in the world, so to fix this we multiply x and y values by 16.
                //The width and height also must be set to 16.
                //Finally, we have to determine what item is being dropped (again I know), and to do this we pass in the ItemID. We are using a modded item so we use ModContent.ItemType to get that
                //new ID.
                //This will only drop 1 of the item. For multiple of the saMe item add a final parameter with the number you want to drop. The "Stack" parameter is defaulted to 1.
                case 0: Item.NewItem(new EntitySource_TileBreak(x, y), x * 16, y * 16, 16, 16, ModContent.ItemType<Items.Placeables.SkulkBar>()); break;

                case 1:
                    //ADD THE ITEM
                    break;
                case 2:
                    //ADD THE ITEM
                    break;
            }

            return base.Drop(x, y);

        }


USED IN: PROJECTILES --------------------------------------------------------------------------------------------------------------

        public override void AI()
        {
            base.AI();
            //Mathhelper will contain helpful values like Pi, PiOver2, PiOver4 that will save time.
            Projectile.rotation = Projectile.velocity.ToRotation() + MathHelper.PiOver2 - MathHelper.PiOver4 * Projectile.spriteDirection; // the velocity has an x and y value that needs to be turned into a radian. The velocity vector has a method for this.
            //spriteDirection will be 1 or -1 based on the direction we are facing. If we face west, it will be -1.

            //we have to create 2 local variables to store HALF the width and height of the projectile
            int halfProjWidth = Projectile.width / 2;
            int halfProjHeight = Projectile.height / 2;

            //offset the graphic so it looks like it is in the players hand.
            DrawOriginOffsetX = 0;
            DrawOffsetX = -((32 / 2) - halfProjWidth);

            DrawOriginOffsetY = -((32 / 2) - halfProjHeight);
        }ssssssssssssssssss