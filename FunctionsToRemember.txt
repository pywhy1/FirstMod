these will be very useful in the future







USED IN: SWORD, TOOLS --------------------------------------------------------------------------------------------------------------

        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("RazorLeaf Sword"); //display name on the sword
            Tooltip.SetDefault("Created with the sharp edges of nature."); //description
            CreativeItemSacrificesCatalog.Instance.SacrificeCountNeededByItemId[Type] = 1; //how many needed for journey mode research
        }

USED IN: ITEMS --------------------------------------------------------------------------------------------------------------
        public override void AddRecipes()
        {
            CreateRecipe() //this takes a param in the '()' for how many gets created at a time, by default it is 1.
                .AddRecipeGroup(RecipeGroupID.Wood, 10) //recipe groups are items that are related in some kind of way, like iron and lead, and all wood types.
                .AddIngredient(ModContent.ItemType<FirstItem>(), 8) //this accesses my FirstItem material.
                .AddTile(TileID.WorkBenches) //addtile takes tile id for crafting (like if it takes a anvil or a work bench)
                .Register(); //register registers the item.

        }
        


USED IN: TILES ------------------------------------------------------------------------------------------------------------------------------------
        public override bool Drop(int x, int y)
        { //We want to get the tile from its position in the world, to do this we create a local variable with the type of Tile. We then set this tile to be equal to whatever
            //tile is in the x and y tiles array
            Tile t = Main.tile[x, y];

            //we need to get the tiles frame index in order to determine what item is going to be dropped. We know that each frame is 18 piels wide so we take the tiles FrameX and divide that by
            //18 to get the frame index.
            int style = t.TileFrameX / 18;
            //the switch statement will make it easier to create the items. We can create a new item depending on the value "Style".
            switch(style) //style, being of course, which bar from the sprite strip we are using.
            {
                //in order to spawn an item, Item.NewItem is used, which takes: Source, X, Y, Width, Height, ItemType. as parameters
                //the x and y value are currently equal to the position of the tile in the array and not the actual position in the world, so to fix this we multiply x and y values by 16.
                //The width and height also must be set to 16.
                //Finally, we have to determine what item is being dropped (again I know), and to do this we pass in the ItemID. We are using a modded item so we use ModContent.ItemType to get that
                //new ID.
                //This will only drop 1 of the item. For multiple of the saMe item add a final parameter with the number you want to drop. The "Stack" parameter is defaulted to 1.
                case 0: Item.NewItem(new EntitySource_TileBreak(x, y), x * 16, y * 16, 16, 16, ModContent.ItemType<Items.Placeables.SkulkBar>()); break;

                case 1:
                    //ADD THE ITEM
                    break;
                case 2:
                    //ADD THE ITEM
                    break;
            }

            return base.Drop(x, y);

        }


USED IN: PROJECTILES --------------------------------------------------------------------------------------------------------------

        public override void AI()
        {
            base.AI();
            //Mathhelper will contain helpful values like Pi, PiOver2, PiOver4 that will save time.
            Projectile.rotation = Projectile.velocity.ToRotation() + MathHelper.PiOver2 - MathHelper.PiOver4 * Projectile.spriteDirection; // the velocity has an x and y value that needs to be turned into a radian. The velocity vector has a method for this.
            //spriteDirection will be 1 or -1 based on the direction we are facing. If we face west, it will be -1.

            //we have to create 2 local variables to store HALF the width and height of the projectile
            int halfProjWidth = Projectile.width / 2;
            int halfProjHeight = Projectile.height / 2;

            //offset the graphic so it looks like it is in the players hand.
            DrawOriginOffsetX = 0;
            DrawOffsetX = -((32 / 2) - halfProjWidth);

            DrawOriginOffsetY = -((32 / 2) - halfProjHeight);
        }ssssssssssssssssss